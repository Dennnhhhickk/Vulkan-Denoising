#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel
{
    vec4 value;
};

layout(std140, binding = 0) buffer buf
{
    Pixel imageData[];
};

vec4 Color(uint x, uint y, int a_width)
{
    return imageData[a_width * y + x + 2].value;
}

float ddistance(vec4 a, vec4 b)
{
    vec4 c = 256.0 * (a - b);
    return sqrt(dot(c, c));
}

float w(uint posx, uint posy, uint x, uint y, int a_width, float R, float DISPER)
{
  return exp(-((((posx - x) * (posx - x)) + ((posy - y) * (posy - y))) / (2 * R * R) + ddistance(Color(x, y, a_width), Color(posx, posy, a_width)) / (2 * DISPER * DISPER)));
}

void main()
{

    int WIDTH = int(imageData[0].value.r);
    int HEIGHT = int(imageData[0].value.g);
    float R = imageData[0].value.b;
    float DISPER = imageData[0].value.a;

    int posy = int(imageData[1].value.r);
    int posx = int(imageData[1].value.g);
    int a_width = int(imageData[1].value.a);
    int a_height = int(imageData[1].value.b);

    uint x = int(gl_GlobalInvocationID.x);
    uint y = int(gl_GlobalInvocationID.y);

    if (x < 0 || x >= a_width ||y < 0 || y >= a_height) {
        return;
    }

    float ans;
    vec4 a1 = vec4(0.0, 0.0, 0.0, 0.0);
    float a2 = 0;

    for (int i = 0; i < HEIGHT; ++i) {
        if (y + i < a_height) {
            for (int j = 0; j < WIDTH; ++j) {
                if (x + j < a_width) {
                    ans = w(x, y, x + j, y + i, a_width, R, DISPER);
                    a1 += Color(x + j, y + i, a_width) * ans;
                    a2 += ans;
                }
                if (x - j >= 0) {
                    ans = w(x, y, x - j, y + i, a_width, R, DISPER);
                    a1 += Color(x - j, y + i, a_width) * ans;
                    a2 += ans;
                }
            }
        }
        if (y - i >= 0) {
            for (int j = 0; j < WIDTH; ++j) {
                if (x + j < a_width) {
                    ans = w(x, y, x + j, y - i, a_width, R, DISPER);
                    a1 += Color(x + j, y - i, a_width) * ans;
                    a2 += ans;
                }
                if (x - j >= 0) {
                    ans = w(x, y, x - j, y - i, a_width, R, DISPER);
                    a1 += Color(x - j, y - i, a_width) * ans;
                    a2 += ans;
                }
            }
        }
    }

    imageData[a_width * y + x + 2 + a_width * a_height].value = a1 / a2;
}